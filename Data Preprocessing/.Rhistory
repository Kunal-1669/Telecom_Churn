## checking inactive customers
nrow(subset(Telecom_Data, MonthlyRevenue <= 0))
## checking inactive customers
nrow(subset(Telecom_Data, MonthlyMinutes <= 0))
#starwars %>% filter(mass > mean(mass, na.rm = TRUE))
#sum(is.na(Telecom_Data))
library(tidyverse)
map(Telecom_Data, ~sum(is.na(.)))
## Remvoing null values
Telecom_Data <- na.omit(Telecom_Data) # Method 1 - Remove NA
sum(is.na(Telecom_Data))
write.csv(Telecom_Data, "D:\\ID_Project\\T9-Outlier-22FA\\Data Preprocessing\\cleaned_telcom_data.csv", row.names=FALSE)
library("dplyr")
table(Telecom_Data$Churn)
Telecom_Data_rm <- subset(Telecom_Data, select = -c(CustomerID, ServiceArea))
Telecom_Data_rm$Churn<-replace(Telecom_Data_rm$Churn, Telecom_Data_rm$Churn == "No", 0)
Telecom_Data_rm$Churn<-replace(Telecom_Data_rm$Churn, Telecom_Data_rm$Churn == "Yes", 1)
Telecom_Data_rm$Churn =as.numeric(Telecom_Data_rm$Churn )
#Telecom_Data_rm$CreditRating[Telecom_Data_rm$CreditRating == '1-Highest'] <- "1"
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "1-Highest", 1)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "2-High", 2)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "3-Good", 3)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "4-Medium",4 )
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "5-Low", 5)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "6-VeryLow", 6)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "7-Lowest", 7)
Telecom_Data_rm$CreditRating <- as.numeric(Telecom_Data_rm$CreditRating )
#Telecom_Data_rm["Churn"][Telecom_Data_rm["Churn"] == "No" ] <- 0
#Telecom_Data_rm["Churn"][Telecom_Data_rm["Churn"] == "Yes" ] <- 1
#Telecom_Data_rm$Churn =as.numeric(Telecom_Data_rm$Churn )
unique(Telecom_Data_rm$CreditRating )
#sum(Telecom_Data_rm$CreditRating)
#sum(Telecom_Data_rm$Churn)
# Install the required package
#install.packages("fastDummies")
cat_cols <-c("ChildrenInHH",'HandsetRefurbished',
'HandsetWebCapable', 'TruckOwner', 'RVOwner', 'Homeownership',
'BuysViaMailOrder', 'RespondsToMailOffers', 'OptOutMailings',
'NonUSTravel', 'OwnsComputer', 'HasCreditCard', 'NewCellphoneUser',
'NotNewCellphoneUser', 'OwnsMotorcycle', 'HandsetPrice',
'MadeCallToRetentionTeam', 'PrizmCode', 'Occupation',
'MaritalStatus')
# Load the library
library(fastDummies)
dummy_cols(Telecom_Data_rm,select_columns=cat_cols,remove_first_dummy = TRUE,remove_selected_columns=TRUE)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# Once installed, load the library.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
Telecom_Data <- data.frame(read.csv("Telecom Data.csv"))
ncol(Telecom_Data)
nrow(Telecom_Data)
str(Telecom_Data)
#Telecom_Data$Churn <- factor(Telecom_Data$Churn)
#Telecom_Data$CreditRating <- factor(Telecom_Data$CreditRating)
Telecom_Data$Occupation <- factor(Telecom_Data$Occupation)
library(ggplot2)
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
ggplot(Telecom_Data, aes(x = AgeHH2)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
Telecom_Data$AgeHH1<-replace(Telecom_Data$AgeHH1,Telecom_Data$AgeHH1 <1 ,NA)
Telecom_Data$AgeHH2<-replace(Telecom_Data$AgeHH2,Telecom_Data$AgeHH2 <1 ,NA)
Telecom_Data$AgeHH1[is.na(Telecom_Data$AgeHH1)]<- median(Telecom_Data$AgeHH1,na.rm = TRUE)
Telecom_Data$AgeHH2[is.na(Telecom_Data$AgeHH2)]<- median(Telecom_Data$AgeHH2,na.rm = TRUE)
library(ggplot2)
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_boxplot(color="red", fill="green", alpha=0.2)
ggplot(Telecom_Data, aes(x = AgeHH2)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
ggplot(Telecom_Data, aes(x = DirectorAssistedCalls)) +
geom_histogram(color="red", fill="green", alpha=0.2)
ggplot(Telecom_Data, aes(x = MonthlyRevenue)) +
geom_boxplot(color="red", fill="green", alpha=0.2)
## checking inactive customers
nrow(subset(Telecom_Data, MonthlyRevenue <= 0))
## checking inactive customers
nrow(subset(Telecom_Data, MonthlyMinutes <= 0))
#starwars %>% filter(mass > mean(mass, na.rm = TRUE))
Telecom_Data<-subset(Telecom_Data, MonthlyRevenue >  0)
Telecom_Data <-subset(Telecom_Data, MonthlyMinutes > 0)
nrow(Telecom_Data)
#sum(is.na(Telecom_Data))
library(tidyverse)
map(Telecom_Data, ~sum(is.na(.)))
## Remvoing null values
Telecom_Data <- na.omit(Telecom_Data) # Method 1 - Remove NA
sum(is.na(Telecom_Data))
library("dplyr")
table(Telecom_Data$Churn)
Telecom_Data_rm <- subset(Telecom_Data, select = -c(CustomerID, ServiceArea))
Telecom_Data_rm$Churn<-replace(Telecom_Data_rm$Churn, Telecom_Data_rm$Churn == "No", 0)
Telecom_Data_rm$Churn<-replace(Telecom_Data_rm$Churn, Telecom_Data_rm$Churn == "Yes", 1)
Telecom_Data_rm$Churn =as.numeric(Telecom_Data_rm$Churn )
#Telecom_Data_rm$CreditRating[Telecom_Data_rm$CreditRating == '1-Highest'] <- "1"
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "1-Highest", 1)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "2-High", 2)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "3-Good", 3)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "4-Medium",4 )
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "5-Low", 5)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "6-VeryLow", 6)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "7-Lowest", 7)
Telecom_Data_rm$CreditRating <- as.numeric(Telecom_Data_rm$CreditRating )
#Telecom_Data_rm["Churn"][Telecom_Data_rm["Churn"] == "No" ] <- 0
#Telecom_Data_rm["Churn"][Telecom_Data_rm["Churn"] == "Yes" ] <- 1
#Telecom_Data_rm$Churn =as.numeric(Telecom_Data_rm$Churn )
unique(Telecom_Data_rm$CreditRating )
#sum(Telecom_Data_rm$CreditRating)
#sum(Telecom_Data_rm$Churn)
# Install the required package
#install.packages("fastDummies")
cat_cols <-c("ChildrenInHH",'HandsetRefurbished',
'HandsetWebCapable', 'TruckOwner', 'RVOwner', 'Homeownership',
'BuysViaMailOrder', 'RespondsToMailOffers', 'OptOutMailings',
'NonUSTravel', 'OwnsComputer', 'HasCreditCard', 'NewCellphoneUser',
'NotNewCellphoneUser', 'OwnsMotorcycle', 'HandsetPrice',
'MadeCallToRetentionTeam', 'PrizmCode', 'Occupation',
'MaritalStatus')
# Load the library
library(fastDummies)
dummy_cols(Telecom_Data_rm,select_columns=cat_cols,remove_first_dummy = TRUE,remove_selected_columns=TRUE)
# Install the required package
#install.packages("fastDummies")
cat_cols <-c("ChildrenInHH",'HandsetRefurbished',
'HandsetWebCapable', 'TruckOwner', 'RVOwner', 'Homeownership',
'BuysViaMailOrder', 'RespondsToMailOffers', 'OptOutMailings',
'NonUSTravel', 'OwnsComputer', 'HasCreditCard', 'NewCellphoneUser',
'NotNewCellphoneUser', 'OwnsMotorcycle', 'HandsetPrice',
'MadeCallToRetentionTeam', 'PrizmCode', 'Occupation',
'MaritalStatus')
# Load the library
library(fastDummies)
prepro_data<-dummy_cols(Telecom_Data_rm,select_columns=cat_cols,remove_first_dummy = TRUE,remove_selected_columns=TRUE)
# Install the required package
#install.packages("fastDummies")
cat_cols <-c("ChildrenInHH",'HandsetRefurbished',
'HandsetWebCapable', 'TruckOwner', 'RVOwner', 'Homeownership',
'BuysViaMailOrder', 'RespondsToMailOffers', 'OptOutMailings',
'NonUSTravel', 'OwnsComputer', 'HasCreditCard', 'NewCellphoneUser',
'NotNewCellphoneUser', 'OwnsMotorcycle', 'HandsetPrice',
'MadeCallToRetentionTeam', 'PrizmCode', 'Occupation',
'MaritalStatus')
# Load the library
library(fastDummies)
prepro_data<-dummy_cols(Telecom_Data_rm,select_columns=cat_cols,remove_first_dummy = TRUE,remove_selected_columns=TRUE)
write.csv(prepro_data, "D:\\ID_Project\\T9-Outlier-22FA\\Data Preprocessing\\prepro_telcom_data.csv", row.names=FALSE)
library(caTools)
install.packages(caTools)
library(caTools)
install.packages("caTools")
library(caTools)
#make this example reproducible
set.seed(1)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample.split(prepro_data$Churn, SplitRatio = 0.8)
train  <- subset(prepro_data, sample == TRUE)
test   <- subset(prepro_data, sample == FALSE)
#view dimensions of training set
#dim(train)
install.packages("Cran")
library(caTools)
#make this example reproducible
set.seed(1)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample.split(prepro_data$Churn, SplitRatio = 0.8)
train  <- subset(prepro_data, sample == TRUE)
test   <- subset(prepro_data, sample == FALSE)
#view dimensions of training set
#dim(train)
install.packages("caTools")
library(caTools)
#make this example reproducible
set.seed(1)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample.split(prepro_data$Churn, SplitRatio = 0.8)
train  <- subset(prepro_data, sample == TRUE)
test   <- subset(prepro_data, sample == FALSE)
#view dimensions of training set
#dim(train)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
install.packages("caTools")
library(caTools)
#make this example reproducible
set.seed(1)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample.split(prepro_data$Churn, SplitRatio = 0.8)
train  <- subset(prepro_data, sample == TRUE)
test   <- subset(prepro_data, sample == FALSE)
#view dimensions of training set
#dim(train)
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# Once installed, load the library.
library(ezids)
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# Once installed, load the library.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
Telecom_Data <- data.frame(read.csv("Telecom Data.csv"))
ncol(Telecom_Data)
nrow(Telecom_Data)
str(Telecom_Data)
#Telecom_Data$Churn <- factor(Telecom_Data$Churn)
#Telecom_Data$CreditRating <- factor(Telecom_Data$CreditRating)
Telecom_Data$Occupation <- factor(Telecom_Data$Occupation)
library(ggplot2)
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
ggplot(Telecom_Data, aes(x = AgeHH2)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
Telecom_Data$AgeHH1<-replace(Telecom_Data$AgeHH1,Telecom_Data$AgeHH1 <1 ,NA)
Telecom_Data$AgeHH2<-replace(Telecom_Data$AgeHH2,Telecom_Data$AgeHH2 <1 ,NA)
Telecom_Data$AgeHH1[is.na(Telecom_Data$AgeHH1)]<- median(Telecom_Data$AgeHH1,na.rm = TRUE)
Telecom_Data$AgeHH2[is.na(Telecom_Data$AgeHH2)]<- median(Telecom_Data$AgeHH2,na.rm = TRUE)
library(ggplot2)
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
library(ggplot2)
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
ggplot(Telecom_Data, aes(x = AgeHH2)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
Telecom_Data$AgeHH1<-replace(Telecom_Data$AgeHH1,Telecom_Data$AgeHH1 <1 ,NA)
Telecom_Data$AgeHH2<-replace(Telecom_Data$AgeHH2,Telecom_Data$AgeHH2 <1 ,NA)
Telecom_Data$AgeHH1[is.na(Telecom_Data$AgeHH1)]<- median(Telecom_Data$AgeHH1,na.rm = TRUE)
Telecom_Data$AgeHH2[is.na(Telecom_Data$AgeHH2)]<- median(Telecom_Data$AgeHH2,na.rm = TRUE)
library(ggplot2)
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_boxplot(color="red", fill="green", alpha=0.2)
ggplot(Telecom_Data, aes(x = AgeHH2)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
ggplot(Telecom_Data, aes(x = DirectorAssistedCalls)) +
geom_histogram(color="red", fill="green", alpha=0.2)
ggplot(Telecom_Data, aes(x = MonthlyRevenue)) +
geom_boxplot(color="red", fill="green", alpha=0.2)
## checking inactive customers
nrow(subset(Telecom_Data, MonthlyRevenue <= 0))
## checking inactive customers
nrow(subset(Telecom_Data, MonthlyMinutes <= 0))
#starwars %>% filter(mass > mean(mass, na.rm = TRUE))
Telecom_Data<-subset(Telecom_Data, MonthlyRevenue >  0)
Telecom_Data <-subset(Telecom_Data, MonthlyMinutes > 0)
nrow(Telecom_Data)
#sum(is.na(Telecom_Data))
library(tidyverse)
map(Telecom_Data, ~sum(is.na(.)))
## Remvoing null values
Telecom_Data <- na.omit(Telecom_Data) # Method 1 - Remove NA
sum(is.na(Telecom_Data))
library("dplyr")
table(Telecom_Data$Churn)
Telecom_Data_rm <- subset(Telecom_Data, select = -c(CustomerID, ServiceArea))
Telecom_Data_rm$Churn<-replace(Telecom_Data_rm$Churn, Telecom_Data_rm$Churn == "No", 0)
Telecom_Data_rm$Churn<-replace(Telecom_Data_rm$Churn, Telecom_Data_rm$Churn == "Yes", 1)
Telecom_Data_rm$Churn =as.numeric(Telecom_Data_rm$Churn )
#Telecom_Data_rm$CreditRating[Telecom_Data_rm$CreditRating == '1-Highest'] <- "1"
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "1-Highest", 1)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "2-High", 2)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "3-Good", 3)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "4-Medium",4 )
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "5-Low", 5)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "6-VeryLow", 6)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "7-Lowest", 7)
Telecom_Data_rm$CreditRating <- as.numeric(Telecom_Data_rm$CreditRating )
#Telecom_Data_rm["Churn"][Telecom_Data_rm["Churn"] == "No" ] <- 0
#Telecom_Data_rm["Churn"][Telecom_Data_rm["Churn"] == "Yes" ] <- 1
#Telecom_Data_rm$Churn =as.numeric(Telecom_Data_rm$Churn )
unique(Telecom_Data_rm$CreditRating )
#sum(Telecom_Data_rm$CreditRating)
#sum(Telecom_Data_rm$Churn)
Telecom_Data_rm <- subset(Telecom_Data, select = -c(CustomerID, ServiceArea))
Telecom_Data_rm$Churn<-replace(Telecom_Data_rm$Churn, Telecom_Data_rm$Churn == "No", 0)
Telecom_Data_rm$Churn<-replace(Telecom_Data_rm$Churn, Telecom_Data_rm$Churn == "Yes", 1)
Telecom_Data_rm$Churn =as.numeric(Telecom_Data_rm$Churn )
#Telecom_Data_rm$CreditRating[Telecom_Data_rm$CreditRating == '1-Highest'] <- "1"
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "1-Highest", 1)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "2-High", 2)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "3-Good", 3)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "4-Medium",4 )
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "5-Low", 5)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "6-VeryLow", 6)
Telecom_Data_rm$CreditRating<-replace(Telecom_Data_rm$CreditRating, Telecom_Data_rm$CreditRating == "7-Lowest", 7)
Telecom_Data_rm$CreditRating <- as.numeric(Telecom_Data_rm$CreditRating )
#Telecom_Data_rm["Churn"][Telecom_Data_rm["Churn"] == "No" ] <- 0
#Telecom_Data_rm["Churn"][Telecom_Data_rm["Churn"] == "Yes" ] <- 1
#Telecom_Data_rm$Churn =as.numeric(Telecom_Data_rm$Churn )
unique(Telecom_Data_rm$CreditRating )
#sum(Telecom_Data_rm$CreditRating)
#sum(Telecom_Data_rm$Churn)
# Install the required package
#install.packages("fastDummies")
cat_cols <-c("ChildrenInHH",'HandsetRefurbished',
'HandsetWebCapable', 'TruckOwner', 'RVOwner', 'Homeownership',
'BuysViaMailOrder', 'RespondsToMailOffers', 'OptOutMailings',
'NonUSTravel', 'OwnsComputer', 'HasCreditCard', 'NewCellphoneUser',
'NotNewCellphoneUser', 'OwnsMotorcycle', 'HandsetPrice',
'MadeCallToRetentionTeam', 'PrizmCode', 'Occupation',
'MaritalStatus')
# Load the library
library(fastDummies)
prepro_data<-dummy_cols(Telecom_Data_rm,select_columns=cat_cols,remove_first_dummy = TRUE,remove_selected_columns=TRUE)
write.csv(prepro_data, "D:\\ID_Project\\T9-Outlier-22FA\\Data Preprocessing\\prepro_telcom_data.csv", row.names=FALSE)
install.packages("caTools")
library(caTools)
#make this example reproducible
set.seed(1)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample.split(prepro_data$Churn, SplitRatio = 0.8)
train  <- subset(prepro_data, sample == TRUE)
test   <- subset(prepro_data, sample == FALSE)
#view dimensions of training set
#dim(train)
install.packages("caTools")
#install.packages("caTools")
library(caTools)
#make this example reproducible
set.seed(1)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample.split(prepro_data$Churn, SplitRatio = 0.8)
train  <- subset(prepro_data, sample == TRUE)
test   <- subset(prepro_data, sample == FALSE)
#view dimensions of training set
#dim(train)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
#install.packages("caTools")
library(caTools)
#make this example reproducible
set.seed(1)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample.split(prepro_data$Churn, SplitRatio = 0.8)
train  <- subset(prepro_data, sample == TRUE)
test   <- subset(prepro_data, sample == FALSE)
#view dimensions of training set
dim(train)
dim(test)
#install.packages("caTools")
library(caTools)
#make this example reproducible
set.seed(1)
#Use 80% of dataset as training set and remaining 30% as testing set
sample <- sample.split(prepro_data$Churn, SplitRatio = 0.8)
train  <- subset(prepro_data, sample == TRUE)
test   <- subset(prepro_data, sample == FALSE)
#view dimensions of training set
dim(train)
dim(test)
table(train$Churn)
table(test$Churn)
library(smotefamily)
install.packages("smotefamily")
library(smotefamily)
install.packages("rlang")
install.packages("rlang")
library(smotefamily)
smote = SMOTE(train, target)
smote = SMOTE(train, Churn)
Churn
train
colnames(train)
train[2:]
subset(train,~c("Churn"))
library(smotefamily)
smote = SMOTE(subset(train,select=~c("Churn")),train$Churn)
subset(train,select=~c("Churn"))
train[2]
train[2:]
library(smotefamily)
smote = SMOTE(subset(train,select=-c("Churn")),train$Churn)
library(smotefamily)
x<-subset(train,select=-c("Churn"))
library(smotefamily)
x<-subset(Telecom_Data, select = -c(Churn))
y<-train$Churn
smote = SMOTE(x,y)
library(smotefamily)
x<-subset(Telecom_Data, select = -c(Churn))
y<-train$Churn
#smote = SMOTE(x,y)
smote = SMOTE(x, train.Churn)
library(smotefamily)
x<-subset(Telecom_Data, select = -c(Churn))
y<-train$Churn
#smote = SMOTE(x,y)
smote = SMOTE(x, y)
View(train)
str(train)
library(smotefamily)
x<-subset(Telecom_Data, select = -c(Churn))
y<-train$Churn
#smote = SMOTE(x,y)
smote = SMOTE(x, y)
library(smotefamily)
x<-subset(Telecom_Data, select = -c(Churn))
library(smotefamily)
x<-subset(Telecom_Data, select = -c(Churn))
y<-train$Churn
#smote = SMOTE(x,y)
smote = SMOTE(x, y,6)
str(train)
library(smotefamily)
x<-subset(Telecom_Data, select = -c(Churn))
y<-train$Churn
#smote = SMOTE(x,y)
x<-as.numeric(x)
View(prepro_data)
library(smotefamily)
x<-subset(train, select = -c(Churn))
y<-train$Churn
#smote = SMOTE(x,y)
#x<-as.numeric(x)
#y<-as.numeric(y)
smote = SMOTE(x, y,6)
newdata = smote$data
library(smotefamily)
x<-subset(train, select = -c(Churn))
y<-train$Churn
#smote = SMOTE(x,y)
#x<-as.numeric(x)
#y<-as.numeric(y)
smote = SMOTE(x, y,6)
library(smotefamily)
x<-subset(train, select = -c(Churn))
y<-train$Churn
#smote = SMOTE(x,y)
#x<-as.numeric(x)
#y<-as.numeric(y)
smote = SMOTE(x, y,6)
train_smote = smote$data
str(train_smote)
