telecom <- data.frame(read.csv("Telecom Data.csv"))
telecom <- data.frame(read.csv("Telecom Data.csv"))
library(ggplot2)
ggplot(telecom, aes(y=CreditRating)) + geom_boxplot( colour="orange", fill="black") + ggtitle("Credit  using `ggplot`")
telecom <- data.frame(read.csv("Telecom Data.csv"))
str(telecom)
head(telecom)
library(ggplot2)
ggplot(telecom, aes(y=CreditRating)) + geom_boxplot( colour="orange", fill="black") + ggtitle("Credit  using `ggplot`")
Churned <- subset(telecom, Churn=="Yes")
NotChurned <- subset(telecom, Churn=="No")
str(Churned)
str(NotChurned)
library(ggplot2)
ggplot(Churned, aes(x = CreditRating)) + geom_bar(col="black", fill="red") + ggtitle("Credit Rating for Churned Telecom Data") + labs(x="Credit Rating (x-axis)", y=" Count (y-axis)") + ylim(0,15000)
library(ggplot2)
ggplot(NotChurned, aes(x = CreditRating)) + geom_bar(col="black", fill="green") + ggtitle("Credit Rating for Not Churned Telecom Data") +  labs(x="Credit Rating (x-axis)", y=" Count (y-axis)")+ ylim(0,15000)
telecom <- data.frame(read.csv("Telecom Data.csv"))
str(telecom)
head(telecom)
telecom <- data.frame(read.csv("Telecom Data.csv"))
telecom
library(ggplot2)
ggplot(telecom, aes(x=telecom$AgeHH1))+ geom_histogram(color="Gray",fill = "Blue", binwidth=3) + labs(x="Age of Customer", y="Count",
title="Histogram of Customer Age")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1))+ geom_histogram(color="Gray",fill = "Blue", binwidth=3) + labs(x="Age of Customer", y="Count",
title="Histogram of Customer Age")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1))+ geom_histogram(color="Gray",fill = "Blue") + labs(x="Age of Customer", y="Count",
title="Histogram of Customer Age")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1))+ geom_histogram(color="Gray",fill = "Blue", bins = =30) + labs(x="Age of Customer", y="Count",
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1))+ geom_histogram(color="Gray",fill = "Blue", bins=30) + labs(x="Age of Customer", y="Count",
title="Histogram of Customer Age")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
library(ezids)
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1))+ geom_histogram(color="Gray",fill = "Blue", bins=30) + labs(x="Age of Customers", y="Count",
title="Histogram of Customer Age")
library(ggplot2)
ggplot(telecom, aes(y=AgeHH1)) + geom_boxplot( colour="orange", fill="black") + ggtitle("Histogram of Customer Ages`")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1)) + geom_boxplot( colour="orange", fill="black") + ggtitle("Histogram of Customer Ages`")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1)) + geom_boxplot( colour="orange", fill="pink") + ggtitle("Histogram of Customer Ages`")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1)) + geom_boxplot( colour="orange", fill="pink", bins=30) + ggtitle("Histogram of Customer Ages`")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1)) + geom_boxplot( colour="orange", fill="pink") + ggtitle("Histogram of Customer Ages`")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1)) + geom_boxplot( colour="orange", fill="pink") + ggtitle("Histogram of Customer Age group`")
telecom <- data.frame(read.csv("Telecom Data.csv"))
head(telecom)
str(telecom)
telecom
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1))+ geom_histogram(color="Gray",fill = "Blue", bins=30) + labs(x="Age of Customers", y="Count",
title="Histogram of Customer Age")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1))+ geom_histogram(color="Gray",fill = "Blue", bins=30) + labs(x="Age of Customers", y="Count",
title="Histogram of Customer Age")
library(ggplot2)
ggplot(telecom, aes(x=Occupation)) + geom_bar(stat="count", fill="magenta") + labs(x="Occupation", y=" Count", title= "Bar Chart of Occupations of Customers")
library(ggplot2)
ggplot(telecom, aes(x=Occupation)) + geom_bar(stat="count", fill="maroon") + labs(x="Occupation", y=" Count", title= "Bar Chart of Occupations of Customers")
library(ggplot2)
ggplot(telecom, aes(x=Occupation)) + geom_bar(stat="count", fill="maroon") + labs(x="Occupation", y=" Count", title= "Bar Chart of Occupations of Customers")
telecom <- data.frame(read.csv("Telecom Data.csv"))
head(telecom)
str(telecom)
telecom
library(ggplot2)
ggplot(telecom, aes(y=CreditRating)) + geom_boxplot( colour="orange", fill="black") + ggtitle("Credit  using `ggplot`")
Churned <- subset(telecom, Churn=="Yes")
NotChurned <- subset(telecom, Churn=="No")
str(Churned)
str(NotChurned)
library(ggplot2)
ggplot(Churned, aes(x = CreditRating)) + geom_bar(col="black", fill="red") + ggtitle("Credit Rating for Churned Telecom Data") + labs(x="Credit Rating (x-axis)", y=" Count (y-axis)") + ylim(0,15000)
library(ggplot2)
ggplot(NotChurned, aes(x = CreditRating)) + geom_bar(col="black", fill="green") + ggtitle("Credit Rating for Not Churned Telecom Data") +  labs(x="Credit Rating (x-axis)", y=" Count (y-axis)")+ ylim(0,15000)
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1))+ geom_histogram(color="Gray",fill = "Blue", bins=30) + labs(x="Age of Customers", y="Count",
title="Histogram of Customer Age")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1)) + geom_boxplot( colour="orange", fill="pink") + ggtitle("Histogram of Customer Age group`")
library(ggplot2)
ggplot(telecom, aes(x=Occupation)) + geom_bar(stat="count", fill="maroon") + labs(x="Occupation", y=" Count", title= "Bar Chart of Occupations of Customers")
library(ggplot2)
ggplot(telecom, aes(x=AgeHH1)) + geom_boxplot( colour="orange", fill="pink") + ggtitle("Histogram of Customer Age group`")
library(plotly)
plot_ly(
data = telecom,
y = ~"Count",
x = ~"Age of Customers",
type = "box",
color = ~feed,
showlegend = FALSE
)
library(plotly)
plot_ly(
data = telecom,
y = ~"Count",
x = ~"Age of Customers",
type = "box",
color = "blue",
showlegend = FALSE
)
library(plotly)
plot_ly(
data = telecom,
x = ~"AgeHH1",
type = "box",
color = "blue",
showlegend = FALSE
)
plot_ly(telecom, y= telecom$AgeHH1, color = telcm$Churn, type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
library(plotly)
plot_ly(telecom, y= telecom$AgeHH1, color = telcm$Churn, type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
library(plotly)
plot_ly(telecom, y= telecom$AgeHH1, color = "blue", type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
library(plotly)
plot_ly(telecom, y= telecom$AgeHH1,type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
library(plotly)
plot_ly(telecom, y= telecom$AgeHH1,type = "box", color = telecom$Churn) %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
AgeFiltered = filter(telecom, AgeHH1= 0)
library(dplyr)
AgeFiltered = filter(telecom, AgeHH1= 0)
library(dplyr)
AgeFiltered = filter(telecom, AgeHH1== 0)
library(dplyr)
AgeFiltered = filter(telecom, AgeHH1== 0)
library(dplyr)
AgeFiltered = filter(telecom, AgeHH1== 0)
nrow(AgeFiltered)
library(dplyr)
AgeFiltered = filter(telecom, AgeHH1== 0)
nrow(AgeFiltered)
13917/nrow(telecom))*100
library(dplyr)
AgeFiltered = filter(telecom, AgeHH1== 0)
(13917/nrow(telecom))*100
library(dplyr)
AgeFiltered = filter(telecom, AgeHH1== 0)
(13917/nrow(telecom))*100
library(plotly)
plot_ly(telecom, y= telecom$AgeHH1,type = "box", color = telecom$Churn) %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
library(ggplot2)
ggplot(telecom, aes(x=Occupation)) + geom_bar(stat="count", fill="maroon") + labs(x="Occupation", y=" Count", title= "Bar Chart of Occupations of Customers")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
Telecom_Data <- data.frame(read.csv("Telecom Data.csv"))
head(Telecom_Data)
str(Telecom_Data)
Telecom_Data
library(ggplot2)
ggplot(Telecom_Data, aes(y=CreditRating)) + geom_boxplot( colour="orange", fill="black") + ggtitle("Credit  using `ggplot`")
Churned <- subset(Telecom_Data, Churn=="Yes")
NotChurned <- subset(Telecom_Data, Churn=="No")
str(Churned)
str(NotChurned)
library(ggplot2)
ggplot(Churned, aes(x = CreditRating)) + geom_bar(col="black", fill="red", alpha=0.4) + ggtitle("Credit Rating for Churned Telecom Data") + labs(x="Credit Rating (x-axis)", y=" Count (y-axis)") + ylim(0,15000) + theme_classic()
library(ggplot2)
ggplot(Churned, aes(x = CreditRating)) + geom_bar(col="black", fill="red", alpha=0.4) + ggtitle("Credit Rating for Churned Telecom Data") + labs(x="Credit Rating (x-axis)", y=" Count (y-axis)") + ylim(0,15000) + theme_classic()
library(ggplot2)
ggplot(NotChurned, aes(x = CreditRating)) + geom_bar(col="black", fill="aquamarine3", alpha=0.6) + ggtitle("Credit Rating for Not Churned Telecom Data") +  labs(x="Credit Rating (x-axis)", y=" Count (y-axis)")+ ylim(0,15000) +  theme_classic()
library(plotly)
ggplot(Telecom_Data, aes(x=AgeHH1))+ geom_histogram(color="aquamarine4",fill = "aquamarine3",alpha=0.6, bins=30) + labs(x="Age of Customers", y="Frequency",
title="Histogram of Customer Age") +  theme_classic()
library(dplyr)
AgeFiltered = filter(Telecom_Data, AgeHH1== 0)
nrow(AgeFiltered)
(13917/nrow(Telecom_Data))*100
library(ggplot2)
ggplot(Telecom_Data, aes(x=AgeHH1)) + geom_boxplot( colour="maroon", fill="aquamarine3",alpha=0.6) + ggtitle("Boxplot of Customer Age group`") + labs(x="Age of Customers", y=" Frequency") +  theme_classic()
library(plotly)
plot_ly(Telecom_Data, y= Telecom_Data$AgeHH1,type = "box", color = Telecom_Data$Churn) %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
library(ggplot2)
ggplot(Telecom_Data, aes(x=Occupation)) + geom_bar(stat="count", fill="maroon") + labs(x="Occupation", y=" Count", title= "Bar Chart of Occupations of Customers")
Telecom_Data <- data.frame(read.csv("Telecom Data.csv"))
str(Telecom_Data)
ncol(Telecom_Data)
nrow(Telecom_Data)
# Boxplot for Credit Rating
library(ggplot2)
ggplot(Telecom_Data, aes(x=CreditRating)) + geom_boxplot( colour="orange", fill="black") + ggtitle("Credit  using `ggplot`")
# Boxplot for Credit Rating
library(ggplot2)
ggplot(Telecom_Data, aes(y=CreditRating)) + geom_boxplot( colour="orange", fill="black") + ggtitle("Credit  using `ggplot`")
library(ggplot2)
ggplot(Telecom_Data, aes(y=AgeHH1)) + geom_boxplot( colour="maroon", fill="aquamarine3",alpha=0.6) + ggtitle("Boxplot of Customer Age group`") + labs(x="Age of Customers", y=" Frequency") +  theme_classic()
knitr::opts_chunk$set(echo = FALSE)
# Barplot for Credit Rating of Churned Data vs Count using ggplot
library(ggplot2)
ggplot(Churned, aes(x = CreditRating)) + geom_bar(col="black", fill="red", alpha=0.4) + ggtitle("Credit Rating for Churned Telecom Data") + labs(x="Credit Rating (x-axis)", y=" Count (y-axis)") + ylim(0,15000) + theme_classic()
# Barplot for Credit Rating of Retained Data vs Count using ggplot
library(ggplot2)
ggplot(NotChurned, aes(x = CreditRating)) + geom_bar(col="black", fill="aquamarine3", alpha=0.6) + ggtitle("Credit Rating for Retained Telecom Data") +  labs(x="Credit Rating (x-axis)", y=" Count (y-axis)")+ ylim(0,15000) +  theme_classic()
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(plotly)
knitr::opts_chunk$set(echo = FALSE)
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_boxplot(color="red", fill="green", alpha=0.2)
ggplot(Telecom_Data, aes(y = AgeHH1)) +
geom_boxplot(color="red", fill="green", alpha=0.2)
ggplot(Telecom_Data, aes(y = AgeHH1)) +
geom_boxplot(color="red", fill="green", alpha=0.2)
ggplot(Telecom_Data, aes(y = AgeHH1)) +
geom_boxplot(color="maroon", fill="aquamarine3", alpha=0.6) + ggtitle("Boxplot of Customer Age group`") + labs(x="Age of Customers", y=" Frequency") +  theme_classic()
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "cyan")
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill="aquamarine3", alpha=0.6, bins=30) + + labs(x="Age of Customers", y="Frequency",
title="Histogram of Customer Age") +  theme_classic()
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill="aquamarine3", alpha=0.6, bins=30) +  labs(x="Age of Customers", y="Frequency",
title="Histogram of Customer Age") +  theme_classic()
library(plotly)
ggplot(Telecom_Data, aes(x=AgeHH1))+ geom_histogram(color="aquamarine4",fill = "aquamarine3",alpha=0.6, bins=30) + labs(x="Age of Customers", y="Frequency",
title="Histogram of Customer Age") +  theme_classic()
# Barplot for Credit Rating of Churned Data vs Count using ggplot
library(ggplot2)
ggplot(MM_Churned, aes(x = CreditRating)) + geom_bar(col="black", fill="red", alpha=0.4) + ggtitle("Credit Rating for Churned Telecom Data") + labs(x="Credit Rating (x-axis)", y=" Count (y-axis)") + ylim(0,15000) + theme_classic()
knitr::opts_chunk$set(echo = FALSE)
library(ggplot2)
library(plotly)
Telecom_Data=data.frame(read.csv("Telecom Data.csv"))
str(Telecom_Data)
churn_counts<- dplyr::count(Telecom_Data,Churn , sort = TRUE)
ggplot(data = churn_counts, aes(x = "", y = n, fill = Churn)) +
geom_bar(stat = "identity") +
coord_polar("y")
ggplot(Telecom_Data, aes(x = MonthlyMinutes)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill = "blue")+
stat_function(fun = dnorm, args = list(mean = mean(Telecom_Data$MonthlyMinutes), sd = sd(Telecom_Data$MonthlyMinutes)))
qqnorm(Telecom_Data$MonthlyMinutes, pch = 1, frame = FALSE)
qqline(Telecom_Data$MonthlyMinutes, col = "red", lwd = 2)
MM_Churned <- subset(Telecom_Data, Churn=="Yes")
MM_Retained <- subset(Telecom_Data, Churn=="No")
#mean(MM_Churned$MonthlyMinutes)
#mean(MM_Retained$MonthlyMinutes)
mean_mm<-mean(MM_Churned$MonthlyMinutes,na.rm=TRUE)
mean_mm_retain<-mean(MM_Retained$MonthlyMinutes,na.rm=TRUE)
ggplot(Telecom_Data, aes(x = AgeHH1)) +
geom_histogram(aes(y = ..density..),
colour = 1, fill="aquamarine3", alpha=0.6, bins=30) +  labs(x="Age of Customers", y="Frequency",
title="Histogram of Customer Age") +  theme_classic()
ggplot(Telecom_Data,aes(x=Occupation)) + geom_bar(fill = "aquamarine3") + ggtitle("Frequency distribution of occupation")+ theme_classic()
# Barplot for Credit Rating of Churned Data vs Count using ggplot
library(ggplot2)
ggplot(MM_Churned, aes(x = CreditRating)) + geom_bar(col="black", fill="red", alpha=0.4) + ggtitle("Credit Rating for Churned Telecom Data") + labs(x="Credit Rating (x-axis)", y=" Count (y-axis)") + ylim(0,15000) + theme_classic()
# Barplot for Credit Rating of Retained Data vs Count using ggplot
library(ggplot2)
ggplot(MM_Retained, aes(x = CreditRating)) + geom_bar(col="black", fill="aquamarine3", alpha=0.6) + ggtitle("Credit Rating for Retained Telecom Data") +  labs(x="Credit Rating (x-axis)", y=" Count (y-axis)")+ ylim(0,15000) +  theme_classic()
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
#
library(plotly)
ggplot(Telecom_Data, aes(x=AgeHH1))+ geom_histogram(color="aquamarine4",fill = "aquamarine3",alpha=0.6, bins=30) + labs(x="Age of Customers", y="Frequency",
title="Histogram of Customer Age") +  theme_classic()
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# Once installed, load the library.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
Telecom_Data <- data.frame(read.csv("Telecom Data.csv"))
ncol(Telecom_Data)
nrow(Telecom_Data)
Telecom_Data$Churn <- factor(Telecom_Data$Churn)
Telecom_Data$CreditRating <- factor(Telecom_Data$CreditRating)
Telecom_Data$Occupation <- factor(Telecom_Data$Occupation)
library(dplyr)
library(tidyr)
## Checking the null values in the dataset
#summary(Telecom_Data)
#is.null(Telecom_Data)
null_values<-sapply(Telecom_Data, function(x) sum(is.na(x)))
null_values
##Creation of new variables for our analysis
Telecom_Data$perc_recurrent_charge <- (Telecom_Data$TotalRecurringCharge /Telecom_Data$MonthlyRevenue) * 100
Telecom_Data$perc_overage_minute <- (Telecom_Data$OverageMinutes / Telecom_Data$MonthlyMinutes) * 100
str(Telecom_Data)
## Getting Churn counts
churn_counts<- dplyr::count(Telecom_Data,Churn , sort = TRUE)
library("ggplot2")
ggplot(data = churn_counts, aes(x = "", y = n, fill = Churn)) +
geom_bar(stat = "identity") +
coord_polar("y")
library(plotly)
colors <- c('rgb(211,94,96)', 'rgb(128,133,133)', 'rgb(144,103,167)', 'rgb(171,104,87)', 'rgb(114,147,203)')
fig <- plot_ly(type='pie', labels=churn_counts$Churn, values=churn_counts$n,
textinfo='label+percent',
insidetextorientation='radial',marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)))
fig
library(dplyr)
Telecom_Data_yes = filter(Telecom_Data, Churn == "Yes")
Telecom_Data_no = filter(Telecom_Data, Churn == "No")
summary(Telecom_Data_yes)
summary(Telecom_Data_no)
feat_typ_counts <- data.frame(read.csv("Feat_type_counts.csv"))
#install.packages("plotrix")
library(plotrix)
library("ggplot2")
#pie(feat_typ_counts$Counts, feat_typ_counts$Variable.Type)
piepercent<- round(100 * feat_typ_counts$Counts / sum(feat_typ_counts$Counts), 1)
feat_typ_counts$fraction <- feat_typ_counts$Counts / sum(feat_typ_counts$Counts)
# Compute the cumulative percentages (top of each rectangle)
feat_typ_counts$ymax <- cumsum(feat_typ_counts$fraction)
# Compute the bottom of each rectangle
feat_typ_counts$ymin <- c(0, head(feat_typ_counts$ymax, n=-1))
# Compute label position
feat_typ_counts$labelPosition <- (feat_typ_counts$ymax + feat_typ_counts$ymin) / 2
# Compute a good label
feat_typ_counts$label <- paste0(feat_typ_counts$Variable.Type, "\n Count: ", feat_typ_counts$Counts)
ggplot(feat_typ_counts, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=Variable.Type)) +
geom_rect() +
geom_label( x=3.5, aes(y=labelPosition, label=label), size=2) +
scale_fill_brewer(palette=4) +
coord_polar(theta="y") +
xlim(c(2, 4)) +
theme_void() +
theme(legend.position = "none")
xkablesummary(Telecom_Data)
boxplot(Telecom_Data$MonthlyMinutes,
main = "Monthly Minutes of Customers",
xlab = "Monthly Min",
ylab = "Frequency",
col = "orange",
border = "brown",
horizontal = TRUE,
notch = TRUE
)
plot_ly(Telecom_Data, y= Telecom_Data$CurrentEquipmentDays, color = Telecom_Data$Churn, type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
plot_ly(Telecom_Data, y= Telecom_Data$TotalRecurringCharge, color = Telecom_Data$Churn, type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
plot_ly(Telecom_Data, y= Telecom_Data$MonthsInService, color = Telecom_Data$Churn, type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
plot_ly(Telecom_Data, y= Telecom_Data$perc_recurrent_charge, color = Telecom_Data$Churn, type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
plot_ly(Telecom_Data, y= Telecom_Data$PercChangeMinutes, color = Telecom_Data$Churn, type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
plot_ly(Telecom_Data, y= Telecom_Data$PercChangeRevenues, color = Telecom_Data$Churn, type = "box") %>%
layout(boxmode = "group",
xaxis = list(title=''),
yaxis = list(title='Frequency'))
library(ggplot2)
library(plotly)
set.seed(1)
gg <- ggplot(Telecom_Data,aes(x = MonthlyRevenue, color = 'density')) +
geom_histogram(aes(y = ..density..), bins = 7,  fill = '#67B7D1', alpha = 0.5) +
geom_density(color = '#67B7D1') +
geom_rug(color = '#67B7D1') +
ylab("") +
xlab("")  + theme(legend.title=element_blank()) +
scale_color_manual(values = c('density' = '#67B7D1'))
ggplotly(gg)%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
title='Time',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title='Monthly Revenue',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
library(ggplot2)
library(plotly)
set.seed(1)
gg <- ggplot(Telecom_Data,aes(x = MonthlyMinutes, color = 'density')) +
geom_histogram(aes(y = ..density..), bins = 7,  fill = '#67B7D1', alpha = 0.5) +
geom_density(color = '#67B7D1') +
geom_rug(color = '#67B7D1') +
ylab("") +
xlab("")  + theme(legend.title=element_blank()) +
scale_color_manual(values = c('density' = '#67B7D1'))
ggplotly(gg)%>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
title='Monthly Minutes ',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title='Frequency',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
qqnorm(Telecom_Data$MonthlyMinutes)                        # QQplot
qqline(Telecom_Data$MonthlyMinutes, col = "red")
#install.packages("car")
#library("car")
#qqPlot(Telecom_Data$MonthlyMinutes)
library("plotly")
#plot_ly(Telecom_Data, y= Telecom_Data$AgeHH1, color = Telecom_Data$Churn, type = "box")
#layout(boxmode = "group",
# xaxis = list(title=''),
# yaxis = list(title='Frequency'))
churn_count<-nrow(Telecom_Data$Churn)
ggplot(Telecom_Data,aes(x = NonUSTravel,fill=Churn )) +
geom_bar( position = "stack")+ggtitle("How Travel affects churn")
ggplot(Telecom_Data, aes(x=DroppedCalls, fill=Churn)) + geom_histogram(position='identity',alpha=0.6)
ggplot(Telecom_Data,aes(x=IncomeGroup, fill=Churn))+geom_histogram(position='identity',alpha=0.6)
ggplot(Telecom_Data,aes(x=OptOutMailings,fill=Churn))+geom_bar(position='identity',alpha=0.6)
