knitr::opts_chunk$set(echo = TRUE)
IncomeGroup_Churn<-table(Telecom_Data$IncomeGroup,Telecom_Data$Churn)
knitr::opts_chunk$set(echo = TRUE)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
Telecom_Data <- data.frame(read.csv("Telecom Data.csv"))
ncol(Telecom_Data)
nrow(Telecom_Data)
str(Telecom_Data)
Telecom_Data <- data.frame(read.csv("Telecom Data.csv"))
ncol(Telecom_Data)
nrow(Telecom_Data)
Telecom_Data <- data.frame(read.csv("Telecom Data.csv"))
ncol(Telecom_Data)
nrow(Telecom_Data)
##Creation of new variables for our analysis
Telecom_Data$perc_recurrent_charge <- (Telecom_Data$TotalRecurringCharge /Telecom_Data$MonthlyRevenue) * 100
Telecom_Data$perc_overage_minute <- (Telecom_Data$OverageMinutes / Telecom_Data$MonthlyMinutes) * 100
str(Telecom_Data)
IncomeGroup_Churn<-table(Telecom_Data$IncomeGroup,Telecom_Data$Churn)
str(IncomeGroup_Churn)
chisq_test=chisq.test(IncomeGroup_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
knitr::opts_chunk$set(echo = TRUE)
chisq_test=chisq.test(Service_Area_Churn)
Service_Area_Churn<-table(Telecom_Data$ServiceArea,Telecom_Data$Churn)
str(Service_Area_Churn)
chisq_test=chisq.test(Service_Area_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
ChildrenInHH_Churn<-table(Telecom_Data$ChildrenInHH,Telecom_Data$Churn)
str(ChildrenInHH_Churn)
chisq_test=chisq.test(ChildrenInHH_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
HandsetWebCapable_Churn<-table(Telecom_Data$HandsetWebCapable,Telecom_Data$Churn)
str(HandsetWebCapable_Churn)
chisq_test=chisq.test(HandsetWebCapable_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
TruckOwner_Churn<-table(Telecom_Data$TruckOwner,Telecom_Data$Churn)
str(TruckOwner_Churn)
chisq_test=chisq.test(TruckOwner_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
RVOwner_Churn<-table(Telecom_Data$RVOwner,Telecom_Data$Churn)
str(RVOwner_Churn)
chisq_test=chisq.test(RVOwner_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
Homeownership_Churn<-table(Telecom_Data$Homeownership,Telecom_Data$Churn)
str(Homeownership_Churn)
chisq_test=chisq.test(Homeownership_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
BuysViaMailOrder_Churn<-table(Telecom_Data$BuysViaMailOrder,Telecom_Data$Churn)
str(BuysViaMailOrder_Churn)
BuysViaMailOrder_Churn<-table(Telecom_Data$BuysViaMailOrder,Telecom_Data$Churn)
str(BuysViaMailOrder_Churn)
chisq_test=chisq.test(BuysViaMailOrder_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
RespondsToMailOffers_Churn<-table(Telecom_Data$RespondsToMailOffers,Telecom_Data$Churn)
str(RespondsToMailOffers_Churn)
chisq_test=chisq.test(RespondsToMailOffers_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
OptOutMailings_Churn<-table(Telecom_Data$OptOutMailings,Telecom_Data$Churn)
str(OptOutMailings_Churn)
chisq_test=chisq.test(OptOutMailings_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
NonUSTravel_Churn<-table(Telecom_Data$NonUSTravel,Telecom_Data$Churn)
str(NonUSTravel_Churn)
chisq_test=chisq.test(NonUSTravel_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
OwnsComputer_Churn<-table(Telecom_Data$OwnsComputer,Telecom_Data$Churn)
str(OwnsComputer_Churn)
chisq_test=chisq.test(OwnsComputer_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
HasCreditCard_Churn<-table(Telecom_Data$HasCreditCard,Telecom_Data$Churn)
str(HasCreditCard_Churn)
chisq_test=chisq.test(HasCreditCard_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
NewCellphoneUser_Churn<-table(Telecom_Data$NewCellphoneUser,Telecom_Data$Churn)
str(HasCreditCard_Churn)
chisq_test=chisq.test(NewCellphoneUser_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
NotNewCellphoneUser_Churn<-table(Telecom_Data$NotNewCellphoneUser,Telecom_Data$Churn)
str(NotNewCellphoneUser_Churn)
chisq_test=chisq.test(NotNewCellphoneUser_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
OwnsMotorcycle_Churn<-table(Telecom_Data$OwnsMotorcycle,Telecom_Data$Churn)
str(OwnsMotorcycle_Churn)
chisq_test=chisq.test(OwnsMotorcycle_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
HandsetPrice_Churn<-table(Telecom_Data$HandsetPrice,Telecom_Data$Churn)
str(HandsetPrice_Churn)
chisq_test=chisq.test(HandsetPrice_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
MadeCallToRetentionTeam_Churn<-table(Telecom_Data$MadeCallToRetentionTeam,Telecom_Data$Churn)
str(MadeCallToRetentionTeam_Churn)
chisq_test=chisq.test(MadeCallToRetentionTeam_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
CreditRating_Churn<-table(Telecom_Data$CreditRating,Telecom_Data$Churn)
str(CreditRating_Churn)
chisq_test=chisq.test(CreditRating_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
PrizmCode_Churn<-table(Telecom_Data$PrizmCode,Telecom_Data$Churn)
str(PrizmCode_Churn)
chisq_test=chisq.test(PrizmCode_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
Occupation_Churn<-table(Telecom_Data$Occupation,Telecom_Data$Churn)
str(Occupation_Churn)
chisq_test=chisq.test(Occupation_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
MaritalStatus_Churn<-table(Telecom_Data$MaritalStatus,Telecom_Data$Churn)
str(MaritalStatus_Churn)
chisq_test=chisq.test(MaritalStatus_Churn)
chisq_test
p_value=chisq_test$p.value
print(paste("The p value is:",p_value))
data <- read.csv(file = 'prepro_telcom_data.csv')
str(data)
head(data)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample, ]
test   <- data[!sample, ]
#view dimensions of training set
dim(train)
#view dimensions of test set
dim(test)
library(naivebayes)
library(naivebayes)
install.packages('naivebayes')
install.packages('dplyr')
install.packages('ggplot2')
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
data <- read.csv(file = 'prepro_telcom_data.csv')
str(data)
head(data)
model <- naive_bayes(Launch ~ ., data = train, usekernel = T)
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
train  <- data[sample, ]
test   <- data[!sample, ]
#view dimensions of training set
dim(train)
#view dimensions of test set
dim(test)
x = training[,-9]
x = train[,-9]
y = train$Outcome
x = train[,-9]
y = train$Churn
model <- naive_bayes(Churn ~ ., data = train, usekernel = T)
train$Churn = factor(train$Churn)
model <- naive_bayes(Churn ~ ., data = train, usekernel = T)
model plot(model)
train$Churn = factor(train$Churn)
model <- naive_bayes(Churn ~ ., data = train, usekernel = T)
library(pROC)
install.packages(pROC)
install.packages(PROC)
install.packages("PROC")
y
library(pROC)
prediction <- predict(model, test, type="prob")
roc_object <- roc( test$Churn, prediction[,2])
auc( roc_object )
library(pROC)
prediction <- predict(model, test, type="prob")
roc_object <- roc( test$Churn, prediction[,2])
auc( roc_object )
prediction_train <- predict(model, train, type="prob")
roc_object_train <- roc( train$Churn, prediction_train[,2])
auc( roc_object_train )
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
#train  <- data[sample, ]
#test   <- data[!sample, ]
train <- read.csv(file = 'C:\\Users\\Vaishnavi\\OneDrive\\Desktop\\into to data science project\\T9-Outlier-22FA\\Data Preprocessing\\train_smote.csv')
test <- read.csv(file = 'C:\\Users\\Vaishnavi\\OneDrive\\Desktop\\into to data science project\\T9-Outlier-22FA\\Data Preprocessing\\test.csv')
#view dimensions of training set
dim(train)
#view dimensions of test set
dim(test)
library(naivebayes)
library(dplyr)
library(ggplot2)
library(psych)
train$Churn = factor(train$class)
model <- naive_bayes(Churn ~ ., data = train, usekernel = T)
library(pROC)
prediction <- predict(model, test, type="prob")
roc_object <- roc( test$Churn, prediction[,2])
auc( roc_object )
prediction_train <- predict(model, train, type="prob")
roc_object_train <- roc( train$Churn, prediction_train[,2])
auc( roc_object_train )
#Use 70% of dataset as training set and remaining 30% as testing set
sample <- sample(c(TRUE, FALSE), nrow(data), replace=TRUE, prob=c(0.7,0.3))
#train  <- data[sample, ]
#test   <- data[!sample, ]
train <- read.csv(file = 'C:\\Users\\Vaishnavi\\OneDrive\\Desktop\\into to data science project\\T9-Outlier-22FA\\Data Preprocessing\\train_under.csv')
test <- read.csv(file = 'C:\\Users\\Vaishnavi\\OneDrive\\Desktop\\into to data science project\\T9-Outlier-22FA\\Data Preprocessing\\test_under.csv')
#view dimensions of training set
dim(train)
#view dimensions of test set
dim(test)
train$Churn = factor(train$class)
